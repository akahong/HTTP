CSS全称为“层叠样式表 (Cascading Style Sheets)”，它主要是用于定义HTML内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等

语法
css 样式由选择符和声明组成，而声明又由属性和值组成
    选择符：又称选择器，指明网页中要应用样式规则的元素
        选择器分为：标签选择器、类选择器、ID选择器、子选择器、包含(后代)选择器、通用选择器、伪类选择符、分组选择符
            标签选择器：其实就是html代码中的标签
            类选择器：
                语法：.类选器名称{css样式代码;}
                说明：1、英文圆点开头  2、其中类选器名称可以任意起名（但不要起中文）
            ID选择器：ID选择器都类似于类选择符，但也有一些重要的区别
                1、为标签设置id="ID名称"，而不是class="类名称"
                2、ID选择符的前面是井号（#）号，而不是英文圆点（.）
            子选择器：即大于符号(>),用于选择指定标签元素的第一代子元素
                如：.food>li{border:1px solid red;}
            包含(后代)选择器：即加入空格,用于选择指定标签元素下的后辈元素
                注：这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。
                   而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“>”进行选择
                   
                   总结：>作用于元素的第一代后代，空格作用于元素的所有后代。
            通用选择器：它使用一个（*）号指定，它的作用是匹配html中所有标签元素
                如：* {color:red;}
            伪类选择符：它允许给html不存在的标签（标签的某种状态）设置样式，比如说给html中一个标签元素的鼠标滑过的状态来设置字体颜色
                如：a:hover{color:red;}
                   为 a 标签鼠标滑过的状态设置字体颜色变红
            分组选择符：为html中多个标签元素设置同一个样式时，可以使用分组选择符（，）
                如：h1,span{color:red;}
         类和ID选择器的区别：
             相同点：可以应用于任何元素
             不同点：
                  1、ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。
                     而类选择器可以使用多次 
                  2、可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，
                     ID选择器是不可以的（不能使用 ID 词列表）
    声明：在英文大括号“｛｝”中的的就是声明，属性和值之间用英文冒号“：”分隔。当有多条声明时，中间可以英文分号“;”分隔
    如：p{font-size:12px;color:red;}
    
CSS注释代码：用 /*注释语句*/ 来标明

CSS 样式代码插入的形式可以分为以下3种：内联式、嵌入式和外部式三种
    内联式：把css代码直接写在现有的HTML标签中
        如：<p style="color:red;font-size:12px">这里文字是红色。</p>
    嵌入式：把css样式代码写在<style type="text/css"></style>标签之间
        如：<style type="text/css">
            span{
                color:red;
                        }
           </style>
        注：嵌入式css样式必须写在<style></style>之间，并且一般情况下嵌入式css样式写在<head></head>之间
    外部式：把css代码写在一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在<head>内使用<link>标签将css样式文件链接到HTML文件内
        如：<link href="base.css" rel="stylesheet" type="text/css" />
        注：
           rel="stylesheet" type="text/css" 是固定写法不可修改
           <link>标签位置一般写在<head>标签之内
    注：三种方法的优先级为：就近原则（离被设置元素越近优先级别越高）
    
css相同样式按权值显示：标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100
    注意：
       还有一个权值比较特殊--继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低
       当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。（就近原则）
       有些特殊的情况需要为某些样式设置具有最高权值，可以使用!important来解决。（注意：!important要写在分号的前面）
           如：p{color:red!important;}
           
元素分类:在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素。
    常用的块状元素有：
        <div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>
        设置display:block就是将元素显示为块级元素。如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。
            a{display:block;}
        块级元素特点：
            1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）
            2、元素的高度、宽度、行高以及顶和底边距都可设置。
            3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。
    常用的内联元素有：
        <a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>
        块状元素也可以通过代码display:inline将元素设置为内联元素。如下代码就是将块状元素div转换为内联元素，从而使 div 元素具有内联元素特点
            div{display:inline;}
        内联元素特点：
            1、和其他元素都在一行上；
            2、元素的高度、宽度及顶部和底部边距不可设置；
            3、元素的宽度就是它包含的文字或图片的宽度，不可改变
    常用的内联块状元素有：
        <img>、<input>
        内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码display:inline-block就是将元素设置为内联块状元素。
        inline-block 元素特点：
            1、和其他元素都在一行上；
            2、元素的高度、宽度、行高以及顶和底边距都可设置。
            

css布局模型在网页中，元素有三种布局模型：流动模型（Flow）、浮动模型 (Float)、层模型（Layer）
    流动模型：流动（Flow）是默认的网页布局模式
        流动布局模型具有2个比较典型的特征：
            第一点，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。
            实际上，块状元素都会以行的形式占据位置。
            第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示
    浮动模型：可用float:left;来定义两个块状元素并排显示 如
          div{
                width:200px;
                height:200px;
                border:2px red solid;
                float:left;
                            }
           <div id="div1"></div>
           <div id="div2"></div>
     层模型：层模型有三种形式：
         1、绝对定位(position: absolute)
             如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，
             然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。
             如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。
         2、相对定位(position: relative)
             如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性
             确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，
             然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。
         3、固定定位(position: fixed)
             fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，
             它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，
             因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响
         Relative与Absolute组合使用，必须遵守下面规范：
             1、参照定位的元素必须是相对定位元素的前辈元素：如
                 <div id="box1"><!--参照定位的元素-->
                     <div id="box2">相对参照元素进行定位</div><!--相对定位元素-->
                 </div>
             2、参照定位的元素必须加入position:relative：如
                 #box1{
                         width:200px;
                         height:200px;
                         position:relative;        
                       }
             3、定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了：如
                 #box2{
                         position:absolute;
                         top:20px;
                         left:30px;         
                       }

属性：
font-size：字体大小 如 12px
color：字体颜色 如 red
background-color：背景颜色 如 rgb（133,45,200）／rgb(20%,33%,25%)
font-family:中文字体类型 如 宋体
font-weight：文字排版-粗体 如 bold（粗体）
font-style:文字排版-斜体 如 italic（斜体）
font-variant：英文字体设置 如 small-caps
text-decoration:文字排版-下划线、删除线 如 underline（下划线） line-through（删除线）
text-indent:段落排版-段落缩紧 如 2em（2em的意思就是文字的2倍大小）
line-height:段落排版-行高 如 1.5em
letter-spacing:段落排版-中文字间隔、字母间隔 如 50px
word-spacing:段落排版-单词间距 如 50px
text-align:段落排版-对齐（水平） 如：center（居中）right（居右）left（居左）
vertical-align：对齐（垂直）
display：“table-cell”（设置为表格单元显示）
list-style：
border：边框大小 如1px
solid：实体边框
height：高度
weight：宽度
盒子模型-边框：
    border-width:边框宽度 如 2px （或thin | medium | thick）;
    border-style:边框样式 如 dashed（虚线）| dotted（点线）| solid（实线）;
    border-color:边框颜色 如 red(当你设置的颜色是16进制的色彩值时，如果每两位的值相同，可以缩写一半。如：#000000-#000  #336699-#369)
    border-bottom:下边框
    border-top:上边框;
    border-right:右边框; 
    border-left:左边框
盒子模型-填充（按顺时针）：如 div{padding:20px 10px 15px 30px;}
    padding-top:上部填充;
    padding-right:右填充;
    padding-bottom:底部填充;
    padding-left:左填充
    （按顺时针）
    如果上、右、下、左的填充都为10px;可以这么写：div{padding:10px;}
    如果上下填充一样为10px，左右一样为20px，可以这么写：div{padding:10px 20px;}
盒子模型-边界（按顺时针）：如 div{margin:20px 10px 15px 30px;}
     margin-top:上边界;
     margin-right:右边界;
     margin-bottom:底部边界;
     margin-left：左边界
     如果上右下左的边界都为10px，可以这么写：div{ margin:10px;}
     如果left和right的值相同，可缩写为：div{margin:10px 20px 30px;}
     如果上下边界一样为10px，左右一样为20px，可以这么写：div{ margin:10px 20px;}
     总结一下：padding和margin的区别，padding在边框里，margin在边框外。

字体缩写：
    body{
        font-style:italic;
        font-variant:small-caps; 
        font-weight:bold; 
        font-size:12px; 
        line-height:1.5em; 
        font-family:"宋体",sans-serif;
        }
可缩写为：
    body{
        font:italic  small-caps  bold  12px/1.5em  "宋体",sans-serif;
        }
 注意：
    1、使用这一简写方式你至少要指定 font-size 和 font-family 属性，
    其他的属性(如 font-weight、font-style、font-variant、line-height)如未指定将自动使用默认值。
    2、在缩写时 font-size 与 line-height 中间要加入“/”斜扛。如 
        body{
             font:12px/1.5em  "宋体",sans-serif;
             }
